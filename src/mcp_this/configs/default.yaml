toolsets:
  file:
    description: "File operations and management"
    tools:
      find:
        description: "Find files matching a pattern"
        help_text: |
          Find files that match a specified pattern.
          
          Examples:
            find "*.txt"
            find "src/*.py" "/path/to/directory"
        execution:
          command: "find <<working_dir>> -name \"<<pattern>>\" -type f 2>/dev/null | sort"
        parameters:
          pattern:
            description: "File pattern to search for (e.g., '*.txt', 'src/*.py')"
            required: true
          working_dir:
            description: "Directory to search in (defaults to current directory if empty)"
            required: false
            
      search:
        description: "Search for patterns in files with context"
        help_text: |
          Search for a pattern in files and display matches with context.
          
          Examples:
            search "function main" "*.js" 3
            search "import pandas" "*.py" 2
            search "TODO" "*.{js,ts,jsx,tsx}" 5 "/path/to/search"
        execution:
          command: "grep -n --color=never -A<<context_lines>> -B<<context_lines>> --include=\"<<file_pattern>>\" -r \"<<pattern>>\" <<working_dir>> 2>/dev/null || echo 'No matches found'"
        parameters:
          pattern:
            description: "Pattern to search for in files"
            required: true
          file_pattern:
            description: "File pattern to search in (e.g., '*.py', '*.{js,ts}')"
            required: true
          context_lines:
            description: "Number of context lines to show before and after each match"
            required: true
          working_dir:
            description: "Directory to search in (defaults to current directory if empty)"
            required: false
            
      replace:
        description: "Replace text in files"
        help_text: |
          Replace text in files matching a pattern.
          
          Examples:
            replace "oldFunction" "newFunction" "*.js"
            replace "DEBUG" "INFO" "*.log" "/path/to/logs"
            
          Note: This creates a backup of modified files with .bak extension for safety.
        execution:
          command: "find <<working_dir>> -name \"<<file_pattern>>\" -type f -exec grep -l \"<<old_text>>\" {} \\; | xargs -I{} sh -c 'cp \"{}\" \"{}.bak\" && sed -i.tmp \"s/<<old_text>>/<<new_text>>/g\" \"{}\" && rm \"{}.tmp\" && echo \"Updated: {}\"' 2>/dev/null || echo 'No files matched or no replacements made'"
        parameters:
          old_text:
            description: "Text to replace"
            required: true
          new_text:
            description: "New text to insert"
            required: true
          file_pattern:
            description: "File pattern to process (e.g., '*.py', '*.{js,ts}')"
            required: true
          working_dir:
            description: "Directory to search in (defaults to current directory if empty)"
            required: false
            
      cat:
        description: "Display file contents"
        help_text: |
          Display the contents of a file with line numbers.
          
          Examples:
            cat "example.py"
            cat "/path/to/file.txt"
        execution:
          command: "cat -n <<file_path>> 2>/dev/null || echo 'File not found or cannot be read: <<file_path>>'"
        parameters:
          file_path:
            description: "Path to the file to display"
            required: true
            
      head:
        description: "Display the beginning of a file"
        help_text: |
          Display the first N lines of a file.
          
          Examples:
            head "example.log" 20
            head "/path/to/large.csv" 50
        execution:
          command: "head -n <<lines>> <<file_path>> 2>/dev/null || echo 'File not found or cannot be read: <<file_path>>'"
        parameters:
          file_path:
            description: "Path to the file to display"
            required: true
          lines:
            description: "Number of lines to display from the beginning"
            required: true
            
      tail:
        description: "Display the end of a file"
        help_text: |
          Display the last N lines of a file.
          
          Examples:
            tail "example.log" 20
            tail "/path/to/large.csv" 50
        execution:
          command: "tail -n <<lines>> <<file_path>> 2>/dev/null || echo 'File not found or cannot be read: <<file_path>>'"
        parameters:
          file_path:
            description: "Path to the file to display"
            required: true
          lines:
            description: "Number of lines to display from the end"
            required: true
            
      count-lines:
        description: "Count lines in files"
        help_text: |
          Count the number of lines in files matching a pattern.
          
          Examples:
            count-lines "*.py"
            count-lines "src/*.js" "/path/to/src"
        execution:
          command: "find <<working_dir>> -name \"<<pattern>>\" -type f -print0 | xargs -0 wc -l 2>/dev/null || echo 'No matching files found'"
        parameters:
          pattern:
            description: "File pattern to count lines in (e.g., '*.py', 'src/*.js')"
            required: true
          working_dir:
            description: "Directory to search in (defaults to current directory if empty)"
            required: false
            
  dir:
    description: "Directory operations and navigation"
    tools:
      ls:
        description: "List directory contents"
        help_text: |
          List files and directories in a given path.
          
          Examples:
            ls
            ls "/path/to/directory"
            ls "-la"
        execution:
          command: "ls <<options>> <<path>> 2>/dev/null || echo 'Directory not found or cannot be accessed: <<path>>'"
        parameters:
          options:
            description: "Options for ls command (e.g., '-la', '-lt')"
            required: false
          path:
            description: "Path to list (defaults to current directory if empty)"
            required: false
            
      tree:
        description: "Display directory tree structure"
        help_text: |
          Display directory tree structure with optional depth limit.
          
          Examples:
            tree
            tree "/path/to/directory"
            tree "/path/to/directory" 3
        execution:
          command: "find <<path>> -type d -not -path \"*/\\.*\" | sort | sed -e \"s/[^-][^\\/]*\\//  |/g\" -e \"s/|\\([^ ]\\)/|--\\1/\" | head -n <<max_entries>> 2>/dev/null || echo 'Directory not found or cannot be accessed: <<path>>'"
        parameters:
          path:
            description: "Path to display (defaults to current directory if empty)"
            required: false
          max_entries:
            description: "Maximum number of entries to display"
            required: false
            
      du:
        description: "Show directory space usage"
        help_text: |
          Show space usage of directories.
          
          Examples:
            du
            du "/path/to/directory"
            du "-h" "/path/to/directory"
        execution:
          command: "du <<options>> <<path>> 2>/dev/null | sort -nr | head -n 20 || echo 'Directory not found or cannot be accessed: <<path>>'"
        parameters:
          options:
            description: "Options for du command (e.g., '-h', '-s')"
            required: false
          path:
            description: "Path to analyze (defaults to current directory if empty)"
            required: false
            
  text:
    description: "Text processing and manipulation"
    tools:
      sort:
        description: "Sort lines of text"
        help_text: |
          Sort lines of text from a file or input.
          
          Examples:
            sort "example.txt"
            sort "-r" "numbers.txt"
        execution:
          command: "sort <<options>> <<file_path>> 2>/dev/null || echo 'File not found or cannot be read: <<file_path>>'"
        parameters:
          options:
            description: "Sort options (e.g., '-r' for reverse, '-n' for numeric)"
            required: false
          file_path:
            description: "Path to the file to sort"
            required: true
            
      uniq:
        description: "Report or filter out repeated lines"
        help_text: |
          Filter out or count repeated lines in a sorted file.
          
          Examples:
            uniq "sorted_file.txt"
            uniq "-c" "sorted_file.txt"
        execution:
          command: "uniq <<options>> <<file_path>> 2>/dev/null || echo 'File not found or cannot be read: <<file_path>>'"
        parameters:
          options:
            description: "Uniq options (e.g., '-c' to count occurrences)"
            required: false
          file_path:
            description: "Path to the sorted file to process"
            required: true
            
      extract-json:
        description: "Extract and format JSON from a file"
        help_text: |
          Extract and format JSON from a file or specific lines in a file.
          
          Examples:
            extract-json "data.json"
            extract-json "log.txt" "10-20"
        execution:
          command: "if [ -z \"<<line_range>>\" ]; then cat <<file_path>>; else sed -n '<<line_range>>p' <<file_path>>; fi | grep -o '{.*}' | jq . 2>/dev/null || echo 'No valid JSON found or jq not installed'"
        parameters:
          file_path:
            description: "Path to the file containing JSON"
            required: true
          line_range:
            description: "Line range to extract (e.g., '10-20')"
            required: false
            
  system:
    description: "System information and diagnostics"
    tools:
      ps:
        description: "Display running processes"
        help_text: |
          Display information about running processes.
          
          Examples:
            ps
            ps "-ef"
            ps "-aux"
        execution:
          command: "ps <<options>> 2>/dev/null"
        parameters:
          options:
            description: "Options for ps command (e.g., '-ef', '-aux')"
            required: false
            
      df:
        description: "Display disk space usage"
        help_text: |
          Display disk space usage of filesystems.
          
          Examples:
            df
            df "-h"
        execution:
          command: "df <<options>> 2>/dev/null"
        parameters:
          options:
            description: "Options for df command (e.g., '-h', '-i')"
            required: false
            
      uname:
        description: "Display system information"
        help_text: |
          Display system information about this computer.
          
          Examples:
            uname
            uname "-a"
        execution:
          command: "uname <<options>> 2>/dev/null"
        parameters:
          options:
            description: "Options for uname command (e.g., '-a', '-s')"
            required: false
            
      whoami:
        description: "Display current user"
        help_text: |
          Display the username of the current user.
        execution:
          command: "whoami 2>/dev/null"
        parameters: {}
            
  network:
    description: "Network operations and diagnostics"
    tools:
      ping:
        description: "Send ICMP ECHO_REQUEST to network hosts"
        help_text: |
          Send ICMP ECHO_REQUEST packets to network hosts.
          
          Examples:
            ping "google.com" 5
            ping "192.168.1.1" 3
        execution:
          command: "ping -c <<count>> <<host>> 2>/dev/null || echo 'Could not ping <<host>>'"
        parameters:
          host:
            description: "Host to ping (hostname or IP address)"
            required: true
          count:
            description: "Number of packets to send"
            required: true
            
      curl:
        description: "Transfer data from or to a server"
        help_text: |
          Transfer data from or to a server using various protocols.
          
          Examples:
            curl "https://example.com"
            curl "-I" "https://example.com"
        execution:
          command: "curl <<options>> \"<<url>>\" 2>/dev/null || echo 'Could not fetch <<url>>'"
        parameters:
          options:
            description: "Options for curl (e.g., '-I' for headers, '-L' for redirects)"
            required: false
          url:
            description: "URL to request"
            required: true
            
      wget:
        description: "Retrieve files from the web"
        help_text: |
          Download files from the web.
          
          Examples:
            wget "https://example.com/file.zip"
            wget "-q" "https://example.com/file.txt"
        execution:
          command: "wget <<options>> \"<<url>>\" 2>/dev/null || echo 'Could not download <<url>>'"
        parameters:
          options:
            description: "Options for wget (e.g., '-q' for quiet, '-O' for output)"
            required: false
          url:
            description: "URL to download"
            required: true
            
      dig:
        description: "DNS lookup utility"
        help_text: |
          Perform DNS lookups and display answers.
          
          Examples:
            dig "google.com"
            dig "google.com" "MX"
        execution:
          command: "dig <<domain>> <<record_type>> 2>/dev/null || echo 'Could not perform DNS lookup for <<domain>>'"
        parameters:
          domain:
            description: "Domain to look up"
            required: true
          record_type:
            description: "DNS record type (e.g., 'A', 'MX', 'TXT')"
            required: false
            
  git:
    description: "Git version control operations"
    tools:
      git-status:
        description: "Show the working tree status"
        help_text: |
          Display the state of the working directory and staging area.
          
          Examples:
            git-status
            git-status "/path/to/repo"
        execution:
          command: "cd <<repo_path>> && git status 2>/dev/null || echo 'Not a git repository or git command not found'"
        parameters:
          repo_path:
            description: "Path to the git repository (defaults to current directory if empty)"
            required: false
            
      git-log:
        description: "Show commit logs"
        help_text: |
          Show commit logs with optional formatting.
          
          Examples:
            git-log
            git-log "--oneline" "/path/to/repo"
            git-log "--oneline --graph" 10
        execution:
          command: "cd <<repo_path>> && git log <<options>> -n <<limit>> 2>/dev/null || echo 'Not a git repository or git command not found'"
        parameters:
          options:
            description: "Git log options (e.g., '--oneline', '--graph')"
            required: false
          limit:
            description: "Maximum number of commits to display"
            required: false
          repo_path:
            description: "Path to the git repository (defaults to current directory if empty)"
            required: false
            
      git-diff:
        description: "Show changes between commits, commit and working tree, etc"
        help_text: |
          Show changes between commits, branches, working tree, etc.
          
          Examples:
            git-diff
            git-diff "file.txt"
            git-diff "HEAD~1" "/path/to/repo"
        execution:
          command: "cd <<repo_path>> && git diff <<target>> 2>/dev/null || echo 'Not a git repository or git command not found'"
        parameters:
          target:
            description: "Target to diff against (file, commit, branch)"
            required: false
          repo_path:
            description: "Path to the git repository (defaults to current directory if empty)"
            required: false
            
      git-branch:
        description: "List, create, or delete branches"
        help_text: |
          List, create, or delete branches in a git repository.
          
          Examples:
            git-branch
            git-branch "-a"
            git-branch "-r" "/path/to/repo"
        execution:
          command: "cd <<repo_path>> && git branch <<options>> 2>/dev/null || echo 'Not a git repository or git command not found'"
        parameters:
          options:
            description: "Branch options (e.g., '-a' for all, '-r' for remote)"
            required: false
          repo_path:
            description: "Path to the git repository (defaults to current directory if empty)"
            required: false
            
  dev:
    description: "Development tools and utilities"
    tools:
      python-exec:
        description: "Execute Python code"
        help_text: |
          Execute Python code and display the result.
          
          Examples:
            python-exec "print(2 + 2)"
            python-exec "import sys; print(sys.version)"
        execution:
          command: "python3 -c \"<<code>>\" 2>&1 || echo 'Error executing Python code'"
        parameters:
          code:
            description: "Python code to execute"
            required: true
            
      node-exec:
        description: "Execute JavaScript code with Node.js"
        help_text: |
          Execute JavaScript code with Node.js and display the result.
          
          Examples:
            node-exec "console.log(2 + 2)"
            node-exec "console.log(process.version)"
        execution:
          command: "node -e \"<<code>>\" 2>&1 || echo 'Error executing Node.js code or Node.js not installed'"
        parameters:
          code:
            description: "JavaScript code to execute"
            required: true
            
      generate-uuid:
        description: "Generate a random UUID"
        help_text: |
          Generate a random UUID (Universally Unique Identifier).
        execution:
          command: "python3 -c \"import uuid; print(uuid.uuid4())\" 2>/dev/null || echo 'Error generating UUID'"
        parameters: {}
            
      generate-password:
        description: "Generate a random password"
        help_text: |
          Generate a random password of specified length.
          
          Examples:
            generate-password 12
            generate-password 20
        execution:
          command: "LC_ALL=C tr -dc 'A-Za-z0-9!@#$%^&*()_+-=' < /dev/urandom | head -c <<length>> || python3 -c \"import random,string; print(''.join(random.choice(string.ascii_letters + string.digits + '!@#$%^&*()_+-=') for _ in range(<<length>>)))\""
        parameters:
          length:
            description: "Length of the password to generate"
            required: true
            
  utility:
    description: "General utility commands"
    tools:
      date:
        description: "Display or set date and time"
        help_text: |
          Display the current date and time.
          
          Examples:
            date
            date "+%Y-%m-%d"
        execution:
          command: "date <<format>> 2>/dev/null"
        parameters:
          format:
            description: "Format string (e.g., '+%Y-%m-%d')"
            required: false
            
      cal:
        description: "Display a calendar"
        help_text: |
          Display a calendar for a specific month or year.
          
          Examples:
            cal
            cal "3" "2023"
        execution:
          command: "cal <<month>> <<year>> 2>/dev/null || echo 'Error displaying calendar'"
        parameters:
          month:
            description: "Month (1-12, optional)"
            required: false
          year:
            description: "Year (optional)"
            required: false
            
      echo:
        description: "Display a line of text"
        help_text: |
          Display a line of text.
          
          Examples:
            echo "Hello, World!"
        execution:
          command: "echo \"<<text>>\""
        parameters:
          text:
            description: "Text to display"
            required: true